// $Id: Setup.rul,v 1.52.4.3.6.15 1999/10/11 04:46:22 philipn Exp $
//____________________________________________________________________________
//	Copyright (C) 1999 Network Associates Inc. and affiliated companies.
//	All rights reserved.
//	
//  Author: Philip Nathan
//____________________________________________________________________________

// Include header files

    #include "sdlang.h"
//    #include "sddialog.h"
    #include "ifx.h"

// ----- DLL function prototypes -----
    // your DLL function prototypes 
	prototype stdcall BOOL PGPdskIH.IsVolumeAPGPdisk(INT);
	prototype stdcall void PGPdskIH.KillPGPdiskResident();
	prototype stdcall void PGPdskIH.PGPdiskCleanup();
	prototype stdcall BOOL PGPdskIH.LoadPGPdiskDriver();
	prototype stdcall BOOL PGPdskIH.AreAnyPGPdisksMounted();
	prototype stdcall BOOL PGPdskIH.UnmountAllPGPdisks();
	//prototype	LONG version.GetFileVersionInfoSizeA(STRING,BYREF LONG);
	//prototype	BOOL version.GetFileVersionInfoA(STRING,LONG,LONG,BYREF STRING);
	//prototype	BOOL version.VerQueryValueA(BYREF STRING,STRING,BYREF POINTER,BYREF NUMBER); 
	prototype BOOL install.MyGetOpenFileName32(HWND, STRING, STRING, STRING, STRING);
	prototype BOOL install.MyBrowseForFolder32(HWND, STRING);
	prototype cdecl INT  install.PGPclStartMemLockDriver();
	prototype cdecl INT install.StopService(STRING);	
	prototype cdecl BOOL install.IsWin95OSR2Compatible();
	prototype cdecl void install.RefreshStartMenu();
	prototype cdecl BOOL install.IsWin2000Compatible();	
	prototype cdecl INT PGPcl.PGPclGetSDKFilePaths(STRING, INT, STRING, INT, STRING, INT);
	
// ---- script function prototypes -----
	prototype Uninstall65();
	prototype DeleteSharedFile(STRING, STRING);
	prototype UninstallPGPdisk(STRING);
	prototype UninstallPGPnet (STRING);
	prototype UninstallGroupwise();
	prototype CheckRequirements();
	prototype myReboot();
	prototype ShutDownApps();
	prototype SetEnvVar(BOOL, STRING);
	prototype UninstallLotusNotes();
	
	BOOL bIsShellExplorer, bIsWindowsNT4, bIsWindowsNT351, bIsWindows95;
	BOOL bIsWindows2k;
	BOOL bIs32BitSetup, bIsWindows98;
	STRING gInstallDir;
	STRING sztempstr;
	
program
    Disable( BACKGROUND );
	CheckRequirements();
	SdShowMsg ( "Checking for running applications ..." , TRUE );
	ShutDownApps();
	SdShowMsg ( "Checking for running applications ..." , FALSE );
    SdShowMsg ( "Please wait ..." , TRUE );
    Uninstall65();
 	SdShowMsg ( "Please wait ..." , FALSE );
	myReboot();
endprogram

///////////////////////////////////////////////////////////////////////////////
//
// Function: UNINSTALL  6.5
//
//  Purpose: Uninstalls PGP65
//
//
///////////////////////////////////////////////////////////////////////////////
function Uninstall65 ()
	STRING szLocalDB, szName, svValue, svInstallDir, szKey;
	STRING szResultBuffer, OEinstall, Installdir;
	STRING szData, szTemp, szFileName, szUserDir, svResult;
	NUMBER nvType, nvSize, nSize, nHandle;
	LONG lData, lSize;
    BOOL DeleteSharedDLLS, bVerValue, bUpgraded, bVerInfo, bPGPnetReboot;
    BOOL bOpt1, bOpt2;
    POINTER ptr1, ptr2;
	STRING szProfileRoot, szTempSring;
	LIST ProfileDirList;
	
begin
    VarSave (SRCTARGETDIR);
    UninstallLotusNotes();
	//Get the install directory
    RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
    szKey = "SOFTWARE\\Network Associates\\PGP";
    szName = "InstallPath";
    RegDBGetKeyValueEx (szKey, szName, nvType, svValue, nvSize);
    Installdir = svValue;
    gInstallDir = svValue;

    if (FindFile (Installdir, "pgpgw32.exe", svResult) = 0) then
    	UninstallGroupwise ();
    endif;

    //Remove the service info.
	//This needs to be done before SDK removal
	if ((bIsWindows95)||(bIsWindows98)) then
		/*service entry for pgpike95*/
		RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
		szLocalDB = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunServices";
		RegDBDeleteValue ( szLocalDB , "IKEService95" );
	else	
		LaunchAppAndWait (Installdir ^ "IKEservice.exe","-u", WAIT);
	endif;	
	
	TARGETDIR = WINSYSDIR;
    DeleteFile ("randseed.bin");
    DeleteFile ("PGP.hlp");
    DeleteFile ("PGP.gid");
    DeleteFile ("PGPRebind.inf");
    //DELETE .DLL'S FROM WINDOWS SYSTEM DIRECTORY
    TARGETDIR = WINSYSDIR;
	DeleteSharedFile (WINSYSDIR, "PGP_sdk.dll");
	DeleteSharedFile (WINSYSDIR, "PGPsdkNL.dll");
	DeleteSharedFile (WINSYSDIR, "PGPsdkUI.dll");
    DeleteSharedFile (WINSYSDIR, "pgpcl.dll");
    DeleteSharedFile (WINSYSDIR, "pgpmn.dll");
    DeleteSharedFile (WINSYSDIR, "pgprd.dll");
    DeleteSharedFile (WINSYSDIR, "pgpsc.dll");
    DeleteSharedFile (WINSYSDIR, "pgpExch.dll");
    DeleteSharedFile (WINSYSDIR, "pgpoe.dll");
    DeleteSharedFile (WINSYSDIR, "pgphk.dll");
    DeleteSharedFile (WINDIR, "PGPMEM~1.vxd");
    DeleteSharedFile (WINDIR, "PGPMEMLOCK.vxd");
    DeleteSharedFile (WINSYSDIR ^ "drivers", "PGPmemlock.sys");

	//Remove Installdir from PATH (PGP cmdline)
	SetEnvVar(0, Installdir);
	
	if ((bIsWindowsNT4)||(bIsWindows2k)) then
    	GetEnvVar ("USERPROFILE", szUserDir);
        TARGETDIR = szUserDir ^"Application Data\\PGP";
    	DeleteFile ("PGPsdk.dat");
    	DeleteFile ("PGPMacBinaryMappings.txt");
    	DeleteDir(TARGETDIR, ALLCONTENTS);
    	if (bIsWindowsNT4) then
    		TARGETDIR = WINDIR ^"Profiles\\Default User\\Application Data\\PGP";
    	elseif (bIsWindows2k) then
    		ProfileDirList = ListCreate (STRINGLIST);
    		// Get each path from the search path into the list.
			if (StrGetTokens (ProfileDirList, szUserDir, "\\") > 0) then
        		// Report the error.
    			MessageBox ("StrGetTokens failed.", SEVERE);
    		else
				ListGetFirstString (ProfileDirList, szProfileRoot);
				GetNext:
				if (ListGetNextString (ProfileDirList, szTempSring) = 0) then
					szProfileRoot = szProfileRoot ^ szTempSring;
					
					if (szTempSring != "Documents and Settings") then
						goto GetNext;
					endif;
					TARGETDIR = szProfileRoot ^ "\\Default User\\Application Data\\PGP";
					//Destroy the list
					ListDestroy (ProfileDirList);
				endif;
			endif;
    	endif;
    	
       	DeleteFile ("PGPsdk.dat");
    	DeleteFile ("PGPMacBinaryMappings.txt");
		DeleteDir(TARGETDIR, ALLCONTENTS);
		
		//Delete the admin pref file if there is one
    	if (bIsWindowsNT4) then
    		TARGETDIR = WINDIR ^ "Profiles\\All Users\\Application Data\\PGP";
    	elseif (bIsWindows2k) then
    		TARGETDIR = szProfileRoot ^ "All Users\\Application Data\\PGP";
    	endif;
    	DeleteFile ("PGPadmin.dat");
    	DeleteDir(TARGETDIR, ALLCONTENTS);		
	endif;
	
    TARGETDIR = WINDIR;
    DeleteFile ("PGPsdk.dat");
    DeleteFile ("PGPMacBinaryMappings.txt");

    //Outlook Express install location
    szKey = "SOFTWARE\\Network Associates\\PGP\\OE";
    szName = "OutlookExpress";
    RegDBGetKeyValueEx (szKey, szName, nvType, svValue, nvSize);
    OEinstall = svValue;

    //Delete install dir. files
    TARGETDIR = Installdir;
    DeleteFile ("keygen.avi");
    DeleteFile ("Pgp.cnt");
   	DeleteFile ("Pgp.exe");
    DeleteFile ("pgp.hlp");
    DeleteFile ("pgp.gid");
    DeleteFile ("PGPadmin.exe");
    DeleteFile ("PGPkeys.exe");
    DeleteFile ("PGPlog.exe");
    DeleteFile ("PGPtools.exe");
    DeleteFile ("PGPtray.exe");
    DeleteFile ("Quickstart.doc");
    DeleteFile ("PGPclient.dat");
    DeleteFile ("Eudora.url");
    DeleteFile ("Adobe.url");
    DeleteFile ("randseed.bin");
    DeleteFile ("randseed.rnd");
    DeleteFile ("*.pdf");
  	DeleteFile ("*.isu");
    DeleteFile ("PGPsda.etm");
    DeleteFile ("PGPsea.etm");
    DeleteFile ("PGPnetsdk.dat");
    DeleteFile ("uninstall.exe");
	DeleteFile ("PGPadmin.dat");
	
    TARGETDIR = Installdir ^ "Documentation";
    DeleteFile ("license.txt");
    DeleteFile ("whatsnew.htm");
    DeleteFile ("PGPCmdLineGuide.pdf");
    DeleteFile ("PGPWinUsersGuide.pdf");
    DeleteFile ("whatsnew.txt");
    DeleteFile ("whatsnew.doc");
	DeleteFile ("Y2k_product_insert.txt");

    TARGETDIR = Installdir ^ "Sample Keys";
    DeleteFile ("SampleKeys.asc");
    DeleteFile ("WhatIsThis.txt");

    DeleteDir(Installdir ^ "Documentation", ALLCONTENTS);
	DeleteDir(Installdir ^ "Sample Keys", ONLYDIR);

    //GET THE EUDORA PLUGIN PATH
    RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
    szKey = "SOFTWARE\\Network Associates\\PGP\\EudoraPlugin";
    szName = "PluginPath";

    RegDBGetKeyValueEx (szKey, szName, nvType, svValue, nvSize);

    //DELETE THE EUDORA PLUGIN
    TARGETDIR = svValue;
    DeleteFile ("pgpplugin.dll");

    //HKEY_CLASSES_ROOT
    RegDBSetDefaultRoot(HKEY_CLASSES_ROOT);
    RegDBDeleteKey (".aexpk");
    RegDBDeleteKey (".asc");
    RegDBDeleteKey (".bexpk");
    RegDBDeleteKey (".pgd");
    RegDBDeleteKey (".pgp");
    RegDBDeleteKey (".pkr");
    RegDBDeleteKey (".prvkr");
    RegDBDeleteKey (".aexpk");
    RegDBDeleteKey (".pubkr");
    RegDBDeleteKey (".sig");
    RegDBDeleteKey (".skr");
    RegDBDeleteKey (".shf");
    RegDBDeleteKey (".pgr");
    RegDBDeleteKey (".rnd");
    RegDBDeleteKey ("PGP Groups");
    RegDBDeleteKey ("PGP Groups File");
    RegDBDeleteKey ("PGP Share");
    RegDBDeleteKey ("PGP Random Seed");
    RegDBDeleteKey ("CLSID\\{969223c0-26aa-11d0-90ee-444553540000}");
    RegDBDeleteKey ("PGP Armored File");
    RegDBDeleteKey ("PGP Binary Extracted Public Key");
    RegDBDeleteKey ("PGP Armored Extracted Public Key");
    RegDBDeleteKey ("PGP Detached Signature File");
    RegDBDeleteKey ("PGP Encrypted File");
    RegDBDeleteKey ("PGP Private Keyring");
    RegDBDeleteKey ("PGP Public Keyring");
    RegDBDeleteKey ("PGP Binary Extracted Public Key");
    RegDBDeleteKey ("PGP Share File");

    //HKEY_LOCAL_MACHINE
    RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
    RegDBDeleteKey (".aexpk");
    RegDBDeleteKey (".asc");
    RegDBDeleteKey (".bexpk");
    RegDBDeleteKey (".pgd");
    RegDBDeleteKey (".pgp");
    RegDBDeleteKey (".pkr");
    RegDBDeleteKey (".prvkr");
    RegDBDeleteKey (".aexpk");
    RegDBDeleteKey (".pubkr");
    RegDBDeleteKey (".sig");
    RegDBDeleteKey (".skr");
    RegDBDeleteKey ("CLSID\\{969223c0-26aa-11d0-90ee-444553540000}");
    RegDBDeleteKey ("PGP Armored File");
    RegDBDeleteKey ("PGP Binary Extracted Public Key");
    RegDBDeleteKey ("PGP Armored Extracted Public Key");
    RegDBDeleteKey ("PGP Detached Signature File");
    RegDBDeleteKey ("PGP Encrypted File");
    RegDBDeleteKey ("PGP Private Keyring");
    RegDBDeleteKey ("PGP Public Keyring");
    RegDBDeleteKey ("PGP Binary Extracted Public Key");
    RegDBDeleteKey ("SOFTWARE\\Microsoft\\Exchange\\Client\\Extensions\\PGP Plugin");
    RegDBDeleteKey ("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\explorer\\IStatus");
    RegDBDeleteKey ("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\PGP");
    RegDBDeleteKey ("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\PGP");
    RegDBDeleteKey ("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\PGP");
   	RegDBDeleteKey ("SOFTWARE\\Classes\\.pgr");
    RegDBDeleteKey ("SOFTWARE\\Classes\\.rnd");
    RegDBDeleteKey ("SOFTWARE\\Classes\\PGP Groups");
    RegDBDeleteKey ("SOFTWARE\\Classes\\PGP Groups File");
    RegDBDeleteKey ("SOFTWARE\\Classes\\PGP Share");
    RegDBDeleteKey ("SOFTWARE\\Classes\\Randseed File");
    RegDBDeleteKey ("SOFTWARE\\Classes\\Ranseed File");
    RegDBDeleteValue ("SOFTWARE\\Microsoft\\Exchange\\Client\\Extensions", "PGP Plugin");
    RegDBDeleteKey ("SYSTEM\\ControlSet001\\Services\\PGPmemlock");
 	RegDBDeleteKey ("SYSTEM\\ControlSet002\\Services\\PGPmemlock");
 	
 	//BEGIN REMOVE ALL THE KnownDLL REGISTRY ENTRIES FOR THE PGP DLL'S - Imad R. Faiad
 	RegDBDeleteValue ("SYSTEM\\CurrentControlSet\\Control\\Session Manager\\KnownDLLs", "PGP_SDK");
 	RegDBDeleteValue ("SYSTEM\\CurrentControlSet\\Control\\Session Manager\\KnownDLLs", "PGPcl");
 	RegDBDeleteValue ("SYSTEM\\CurrentControlSet\\Control\\Session Manager\\KnownDLLs", "PGPhk");
 	RegDBDeleteValue ("SYSTEM\\CurrentControlSet\\Control\\Session Manager\\KnownDLLs", "PGPmn");
	RegDBDeleteValue ("SYSTEM\\CurrentControlSet\\Control\\Session Manager\\KnownDLLs", "PGPsc");
	RegDBDeleteValue ("SYSTEM\\CurrentControlSet\\Control\\Session Manager\\KnownDLLs", "PGPsdkNL");
	RegDBDeleteValue ("SYSTEM\\CurrentControlSet\\Control\\Session Manager\\KnownDLLs", "PGPsdkUI");
	RegDBDeleteValue ("SYSTEM\\CurrentControlSet\\Control\\Session Manager\\KnownDLLs", "PGPexch");
	RegDBDeleteValue ("SYSTEM\\CurrentControlSet\\Control\\Session Manager\\KnownDLLs", "PGPoe");
	RegDBDeleteValue ("SYSTEM\\CurrentControlSet\\Control\\Session Manager\\KnownDLLs", "PGPDskSE");
	RegDBDeleteValue ("SYSTEM\\CurrentControlSet\\Control\\SessionManager\\KnownDLLs", "PGP_SDK");
 	RegDBDeleteValue ("SYSTEM\\CurrentControlSet\\Control\\SessionManager\\KnownDLLs", "PGPcl");
 	RegDBDeleteValue ("SYSTEM\\CurrentControlSet\\Control\\SessionManager\\KnownDLLs", "PGPhk");
 	RegDBDeleteValue ("SYSTEM\\CurrentControlSet\\Control\\SessionManager\\KnownDLLs", "PGPmn");
	RegDBDeleteValue ("SYSTEM\\CurrentControlSet\\Control\\SessionManager\\KnownDLLs", "PGPsc");
	RegDBDeleteValue ("SYSTEM\\CurrentControlSet\\Control\\SessionManager\\KnownDLLs", "PGPsdkNL");
	RegDBDeleteValue ("SYSTEM\\CurrentControlSet\\Control\\SessionManager\\KnownDLLs", "PGPsdkUI");
	RegDBDeleteValue ("SYSTEM\\CurrentControlSet\\Control\\SessionManager\\KnownDLLs", "PGPexch");
	RegDBDeleteValue ("SYSTEM\\CurrentControlSet\\Control\\SessionManager\\KnownDLLs", "PGPoe");
	RegDBDeleteValue ("SYSTEM\\CurrentControlSet\\Control\\SessionManager\\KnownDLLs", "PGPDskSE");
	
	RegDBSetDefaultRoot(HKEY_CURRENT_USER);
	RegDBDeleteKey ("Software\\Network Associates\\PGP");
	RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE);
	//END REMOVE ALL THE KnownDLL REGISTRY ENTRIES FOR THE PGP DLL'S

    //HKEY_USERS
    RegDBSetDefaultRoot(HKEY_USERS);
    RegDBDeleteKey ("S-1-5-21-1998468922-181747292-2076119496-1000\\Software\\PGP");

    ProgDefGroupType(COMMON);
    DeleteProgramFolder ("P G P");
    DeleteProgramFolder ("P g p");
    DeleteFolderIcon(FOLDER_STARTUP,"PGPtray");
	DeleteFolderIcon(FOLDER_STARTUP,"PGPnet Tray Startup");
	
	//Outlook Express Uninstall
    RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE);
    RegDBDeleteKey ("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\PGPOEPlugin");

	UninstallPGPdisk(Installdir);
	
	RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE);
	if (RegDBKeyExist ("SOFTWARE\\Network Associates\\PGP\\PGPnet") >= 0) then
		UninstallPGPnet(Installdir);
	endif;

    //HKEY_LOCAL_MACHINE
    RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
    RegDBDeleteKey ("Software\\Network Associates\\PGP");
    RegDBDeleteKey ("SOFTWARE\\Network Associates\\PGP");
	
	VarRestore (SRCTARGETDIR);
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: UninstallPGPdisk
//
//  Purpose: Uninstalls PGPDisk
//
//
///////////////////////////////////////////////////////////////////////////////
function UninstallPGPdisk(InstallDirectory)

begin
	VarSave (SRCTARGETDIR);
	
	UseDLL (SUPPORTDIR ^ "PGPdskIH.dll");

    UnmountAllPGPdisks();
	KillPGPdiskResident();
	PGPdiskCleanup();
	
	TARGETDIR = InstallDirectory;
	DeleteFile ("pgpdiskresident.exe");
	DeleteFile ("pgpdisk.exe");
	DeleteFile ("pgpdisk.hlp");
	DeleteFile ("pgpdisk.cnt");
	DeleteFile ("pgpdisk.pdf");
	DeleteFile ("readme.txt");
	DeleteFile ("license.txt");
    TARGETDIR = WINSYSDIR;
    DeleteFile("PGPdskse.dll");

	//Deleting registry Entries.
	RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE);
	RegDBDeleteKey ("Enum\\Root\\PGPdisk");
	RegDBDeleteKey ("System\\CurrentControlSet\\Services\\Class\\PGPdisk");
	
	//Deleting PGPdisk registry Entries.
	RegDBSetDefaultRoot (HKEY_CLASSES_ROOT);
	RegDBDeleteKey (".pgd");
	RegDBDeleteKey ("PGPdisk Volume File");
	RegDBDeleteKey ("CLSID\\{f8b14440-3785-11d1-b363-5c6f08c10000}");
	RegDBDeleteKey ("PGPdisk Volume File\\shellex\\ContextMenuHandlers\\PGPdisk Shell Extension");
	RegDBDeleteKey ("Drive\\shellex\\ContextMenuHandlers\\PGPdisk Shell Extension");
	RegDBDeleteValue ("Drive\\shellex\\ContextMenuHandlers", "");
	RegDBDeleteKey ("PGPdisk Volume");
	RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE);
	RegDBDeleteKey ("Enum\\Root\\PGPdisk");
	RegDBDeleteKey ("System\\CurrentControlSet\\Services\\Class\\PGPdisk");	
	RegDBDeleteValue ("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Shell Extensions\\Approved",
					  "{f8b14440-3785-11d1-b363-5c6f08c10000}" );
	RegDBDeleteKey ("Enum\\ESDI\\PGP_____PGPDISK_________0");
	RegDBDeleteKey ("SOFTWARE\\Network Associates\\PGPdisk");
	RegDBDeleteKey ("SOFTWARE\\Network Associates\\PGPdiskAlpha");
	RegDBDeleteKey ("SOFTWARE\\Network Associates\\PGPdisk Beta");
	RegDBDeleteKey ("SOFTWARE\\Network Associates\\PGPdiskBeta");
	RegDBDeleteKey ("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\PGPdiskDeinstKey");
	RegDBDeleteKey ("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\PGPdisk.exe");
	RegDBDeleteKey ("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\PGPdiskResident.exe");
	RegDBDeleteKey ("SOFTWARE\\Classes\\PGPdisk Volume");
	RegDBSetDefaultRoot (HKEY_CURRENT_USER);
	RegDBDeleteKey ("Software\\Network Associates\\PGPdisk");
	RegDBDeleteKey ("Software\\Network Associates\\PGPdiskAlpha");
	RegDBDeleteKey ("Software\\Network Associates\\PGPdiskBeta");
	RegDBDeleteKey ("Software\\PGP\\PGPdisk");
	RegDBDeleteKey ("Software\\PGP\\PGPdiskAlpha");
	RegDBDeleteKey ("Software\\PGP\\PGPdiskBeta");

	if ((bIsWindowsNT4)||(bIsWindows2k)) then
		RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE);
		RegDBDeleteKey ("System\\CurrentControlSet\\Services\\PGPdisk");
		RegDBDeleteKey ("System\\CurrentControlSet\\Services\\EventLog\\System\\PGPdisk");
		TARGETDIR = WINSYSDIR ^ "Drivers";
		DeleteFile ("pgpdisk.sys");
	else
		TARGETDIR = WINSYSDIR ^ "Iosubsys";
		DeleteFile ("pgpdisk.pdr");
	endif;

	UnUseDLL (SUPPORTDIR ^ "PGPdskIH.dll");
	VarRestore (SRCTARGETDIR);
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: UninstallPGPnet
//
//  Purpose: Uninstalls PGPnet
//
//
///////////////////////////////////////////////////////////////////////////////
function UninstallPGPnet(InstallDirectory)
STRING szKey, szName, svAdapterNum, svAdapterName;
NUMBER nvType, nvSize;

begin
	VarSave (SRCTARGETDIR);
	//PGPnet
	ChangeDirectory(InstallDirectory);
	LaunchAppAndWait (InstallDirectory ^ "SetAdapter.exe","uninstall", WAIT);
		
	LongPathToShortPath (InstallDirectory);
	TARGETDIR = InstallDirectory;
	//Delete program files
	DeleteFile ("IKEservice.exe");
	DeleteFile ("PGP_SDK.dll");
	DeleteFile ("PGPcl.dll");
	DeleteFile ("PGPnet.sys");
	DeleteFile ("PGPnet.exe");
	DeleteFile ("PGPsdkUI.dll");
	DeleteFile ("PGPNetCL.dll");
	DeleteFile ("PGPsdkNL.dll");
	DeleteFile ("Readme.txt");
	DeleteFile ("PGPnet.hlp");
	DeleteFile ("PGPnet.cnt");
	DeleteFile ("PGPnet.dat");
	DeleteFile ("PGPRebind.inf");
	DeleteDir  (InstallDirectory, ONLYDIR);
		
	if!(bIsWindowsNT4) then
		TARGETDIR = WINSYSDIR;
    	DeleteFile ("PGPnet.vxd");
    endif;

	if(bIsWindowsNT4) then	
    	TARGETDIR = WINSYSDIR ^ "drivers";
    	DeleteFile ("PGPnet.sys");
       	RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE);
    	szKey = "SOFTWARE\\Network Associates\\PGP\\PGPnet";
    	szName = "AdapterNum";

    	//cleanup
    	if (RegDBGetKeyValueEx (szKey , szName , nvType , svAdapterNum , nvSize)=0) then
    		szKey = "SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\NetworkCards\\" ^ svAdapterNum;
    		RegDBGetKeyValueEx (szKey , szName , nvType , svAdapterName , nvSize);
    		if ((svAdapterName = "PGPMacMP") || (svAdapterName = "NDISWANPGPMacMP")) then
    			RegDBDeleteKey (szKey);
    		endif;
    	endif;
    endif;
    	
    //most of this will not be needed, its more of a "backup"
	//Delete the reg. entries
	RegDBSetDefaultRoot (HKEY_CURRENT_USER);
	RegDBDeleteKey ("Software\\Network Associates\\PGP\\PGPnet");
		
	if(bIsWindowsNT4) then
		RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE);
		RegDBDeleteKey ("SOFTWARE\\Network Associates\\PGP\\PGPnet");
		RegDBDeleteKey ("SOFTWARE\\Network Associates\\PgpMacMP");
		RegDBDeleteKey ("SOFTWARE\\Network Associates\\NDISWANPgpMacMP");
		RegDBDeleteKey ("SOFTWARE\\Network Associates\\PgpMac");
		//These are copies that windows makes
		RegDBDeleteKey ("SYSTEM\\ControlSet001\\Services\\EventLog\\System\\PgpMac");
		RegDBDeleteKey ("SYSTEM\\ControlSet001\\Services\\EventLog\\System\\PgpMacMP");
		RegDBDeleteKey ("SYSTEM\\ControlSet001\\Services\\EventLog\\System\\NDISWANPgpMacMP");
		RegDBDeleteKey ("SYSTEM\\ControlSet001\\Services\\EventLog\\System\\PgpMacMP"+svAdapterNum);
		RegDBDeleteKey ("SYSTEM\\ControlSet001\\Services\\EventLog\\System\\NDISWANPgpMacMP"+svAdapterNum);
		RegDBDeleteKey ("SYSTEM\\ControlSet002\\Services\\EventLog\\System\\PgpMac");
		RegDBDeleteKey ("SYSTEM\\ControlSet002\\Services\\EventLog\\System\\PgpMacMP");
		RegDBDeleteKey ("SYSTEM\\ControlSet002\\Services\\EventLog\\System\\NDISWANPgpMacMP");
		RegDBDeleteKey ("SYSTEM\\ControlSet002\\Services\\EventLog\\System\\PgpMacMP"+svAdapterNum);
		RegDBDeleteKey ("SYSTEM\\ControlSet002\\Services\\EventLog\\System\\NDISWANPgpMacMP"+svAdapterNum);
		RegDBDeleteKey ("SYSTEM\\ControlSet003\\Services\\EventLog\\System\\PgpMac");
		RegDBDeleteKey ("SYSTEM\\ControlSet003\\Services\\EventLog\\System\\PgpMacMP");
		RegDBDeleteKey ("SYSTEM\\ControlSet003\\Services\\EventLog\\System\\NDISWANPgpMacMP");
		RegDBDeleteKey ("SYSTEM\\ControlSet003\\Services\\EventLog\\System\\PgpMacMP"+svAdapterNum);
		RegDBDeleteKey ("SYSTEM\\ControlSet003\\Services\\EventLog\\System\\NDISWANPgpMacMP"+svAdapterNum);
		RegDBDeleteKey ("SYSTEM\\ControlSet001\\Services\\PgpMac");
		RegDBDeleteKey ("SYSTEM\\ControlSet001\\Services\\PgpMacMP");
		RegDBDeleteKey ("SYSTEM\\ControlSet001\\Services\\NDISWANPgpMacMP");
		RegDBDeleteKey ("SYSTEM\\ControlSet001\\Services\\PgpMacMP"+svAdapterNum);
		RegDBDeleteKey ("SYSTEM\\ControlSet001\\Services\\NDISWANPgpMacMP"+svAdapterNum);
		RegDBDeleteKey ("SYSTEM\\ControlSet002\\Services\\PgpMac");
		RegDBDeleteKey ("SYSTEM\\ControlSet002\\Services\\PgpMacMP");
		RegDBDeleteKey ("SYSTEM\\ControlSet002\\Services\\NDISWANPgpMacMP");
		RegDBDeleteKey ("SYSTEM\\ControlSet002\\Services\\PgpMacMP"+svAdapterNum);
		RegDBDeleteKey ("SYSTEM\\ControlSet002\\Services\\NDISWANPgpMacMP"+svAdapterNum);
		RegDBDeleteKey ("SYSTEM\\ControlSet003\\Services\\PgpMac");
		RegDBDeleteKey ("SYSTEM\\ControlSet003\\Services\\PgpMacMP");
		RegDBDeleteKey ("SYSTEM\\ControlSet003\\Services\\NDISWANPgpMacMP");
		RegDBDeleteKey ("SYSTEM\\ControlSet003\\Services\\PgpMacMP"+svAdapterNum);
		RegDBDeleteKey ("SYSTEM\\ControlSet003\\Services\\NDISWANPgpMacMP"+svAdapterNum);
		//This is the original
		RegDBDeleteKey ("SYSTEM\\CurrentControlSet\\Services\\EventLog\\System\\PgpMac");
		RegDBDeleteKey ("SYSTEM\\CurrentControlSet\\Services\\EventLog\\System\\PgpMacMP");
		RegDBDeleteKey ("SYSTEM\\CurrentControlSet\\Services\\EventLog\\System\\NDISWANPgpMacMP");
		RegDBDeleteKey ("SYSTEM\\CurrentControlSet\\Services\\EventLog\\System\\PgpMacMP"+svAdapterNum);
		RegDBDeleteKey ("SYSTEM\\CurrentControlSet\\Services\\EventLog\\System\\NDISWANPgpMacMP"+svAdapterNum);
		RegDBDeleteKey ("SYSTEM\\CurrentControlSet\\Services\\PgpMac");
		RegDBDeleteKey ("SYSTEM\\CurrentControlSet\\Services\\PgpMacMP");
		RegDBDeleteKey ("SYSTEM\\CurrentControlSet\\Services\\PgpMac"+svAdapterNum);
		RegDBDeleteKey ("SYSTEM\\CurrentControlSet\\Services\\PgpMacMP"+svAdapterNum);
		//These are PGPnetIKE service entries that the -u does not remove
		//These are copies that windows makes
		RegDBDeleteKey ("SYSTEM\\ControlSet001\\Services\\EventLog\\Application\\PGPnetIKE");
		RegDBDeleteKey ("SYSTEM\\ControlSet001\\Services\\PGPnetIKE");
		RegDBDeleteKey ("SYSTEM\\ControlSet002\\Services\\EventLog\\Application\\PGPnetIKE");
		RegDBDeleteKey ("SYSTEM\\ControlSet002\\Services\\PGPnetIKE");
		RegDBDeleteKey ("SYSTEM\\ControlSet003\\Services\\EventLog\\Application\\PGPnetIKE");
		RegDBDeleteKey ("SYSTEM\\ControlSet003\\Services\\PGPnetIKE");
		//This is the original
		RegDBDeleteKey ("SYSTEM\\CurrentControlSet\\Services\\EventLog\\Application\\PGPnetIKE");
		RegDBDeleteKey ("SYSTEM\\CurrentControlSet\\Services\\PGPnetIKE");
		
		//Perform final Bind Review
		ChangeDirectory(InstallDirectory);
		LaunchAppAndWait (InstallDirectory ^ "SetAdapter.exe","review", WAIT);
		Delay(2);
	endif;
	TARGETDIR = InstallDirectory;
	DeleteFile ("SetAdapter.exe");
	DeleteFile ("Oemsetup.inf");
	DeleteFile ("*.dbg");
	DeleteFile ("PGPnetLog.dat");
	DeleteFile ("randseed.rnd");
	RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE);
	RegDBDeleteKey("SOFTWARE\\Network Associates\\PGP\\PGPnet");
	VarRestore (SRCTARGETDIR);
end;

///////////////////////////////////////////////////////////////////////////////
//
//  Function: DeleteSharedFile
//
//  Purpose:  This function will check if a library is shared before deleteing
//
//
///////////////////////////////////////////////////////////////////////////////
function DeleteSharedFile (szDeleteFilePath, szDeleteFile)
    STRING  szDelKey, svString, svValue;
    NUMBER  nvVar, nvType, nvSize, nSize, numDelays;

begin
    RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE);
    szDelKey	= "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\SharedDLLs";
	numDelays = 0;
    RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE);
    if (RegDBGetKeyValueEx(szDelKey,  szDeleteFilePath ^ szDeleteFile, nvType, svValue, nvSize) < 0 ) then
	    //this is not a shared .dll so delete
	    TARGETDIR  = szDeleteFilePath;
	    SRCDIR     = szDeleteFilePath;
	    DeleteFile (szDeleteFile);
DeleteingNonSharedFile:
		if(DeleteFile (szDeleteFile)<0) then
			Delay(1);
			numDelays ++;
			if(numDelays <= 1)then
			//if(numDelays <= 7)then
				goto DeleteingNonSharedFile;
			endif;
		endif;
    else
	    //this is a shared file
	    StrToNum (nvVar, svValue);
	    nvVar = nvVar - 1;
	    if (nvVar < 1) then
				//Delete the file and decrement the count
				RegDBDeleteValue (szDelKey, szDeleteFilePath ^ szDeleteFile);
				TARGETDIR  = szDeleteFilePath;
				SRCDIR     = szDeleteFilePath;
				//NT
				//If we are removing memlock we need to remove service entry
				if (szDeleteFile = "PGPmemlock.sys") then
					RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE);
					RegDBDeleteKey ("SYSTEM\\CurrentControlSet\\Services\\PGPmemlock");
				endif;
DeleteingFile:
				if(DeleteFile (szDeleteFile)<0) then
					Delay(1);
					numDelays ++;
					//if(numDelays <= 7)then
					if(numDelays <= 1)then
						goto DeleteingFile;
					endif;
				endif;				
	    endif;
	    //write the new number of apps shareing the library
	    if (nvVar > 0) then
		    NumToStr(svString, nvVar);
		    RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE);
		    RegDBSetKeyValueEx(szDelKey,  szDeleteFilePath ^ szDeleteFile, REGDB_NUMBER, svString, nSize);
		endif;
    endif;
end;

///////////////////////////////////////////////////////////////////////////////
//
//  Function: ShutDownApps
//
//  Purpose: This function finds running apps. and informs the user
//           to shut them down in order to continue with the install
//
///////////////////////////////////////////////////////////////////////////////
function ShutDownApps()
	//#define MB_OKCANCEL					1
	//#define IDCANCEL					2
	//#define IDRETRY 					4
	//#define MB_RETRYCANCEL				5
	//#define IDYES						6
	#define WM_CLOSE					0x0010 // defines the WM_CLOSE message.
	#define	WM_DESTROY					0x0002 // defines the WMDESTROY message.
	#define PGP_HIDDEN_WINDOW			"PGPtray_Hidden_Window"
	#define PGPNET_WINDOW	 			"PGPnet System Tray App"
	
	HWND hWnd, hWnd1,hWnd2,hWnd3,hWnd4,hWnd5,hWnd6,hWnd7,hWnd8,hWnd9;
	STRING sztemp;
	INT itemp;
	
begin

TestForRunningApps:

	if (FindWindow ("", "PGPdisk") != NULL) then
		if (SprintfBox (MB_RETRYCANCEL, "Application Running", "%s",
		"Please shut down PGPdisk before continuing.") = IDCANCEL) then
			abort;
		else
			goto TestForRunningApps;
		endif;
	endif;
	
	hWnd = FindWindow("","Groupwise - Mailbox");
	if (hWnd1 != NULL) then
		if (SprintfBox (MB_RETRYCANCEL, "Application Running", "%s","For install to continue GroupWise must not be" +
		" running.\nPlease shut it down.")= IDCANCEL) then
			exit;
		else
			goto TestForRunningApps;
		endif;
	endif;
	
	//kill pgptray.exe if possible
	hWnd = FindWindow(PGP_HIDDEN_WINDOW,"");
	if (hWnd > 0) then
		SendMessage(hWnd,WM_CLOSE,0,0);
		//This delay is needed for PGP Dlls to unlock unfortunately
		Delay(4);
	endif;
	
	//Close service windows
	//hWnd = FindWindow("","PGPnet GUI-IKE Communication");
	//if (hWnd > 0) then
	//	SendMessage(hWnd,WM_CLOSE,0,0);
	//	Delay(1);
	//endif;
	
	hWnd = FindWindow("","PGPnet IKE service");
	if (hWnd > 0) then
		SendMessage(hWnd,WM_DESTROY,0,0);
		Delay(1);
	endif;	
	
	//hWnd = FindWindow("","PGPnetReadWorker");
	//if (hWnd > 0) then
	//	SendMessage(hWnd,WM_CLOSE,0,0);
	//	Delay(1);
	//endif;	
	
	//kill pgpnettray.exe if possible
	hWnd = FindWindow(PGPNET_WINDOW,"");
	if (hWnd > 0) then
		SendMessage(hWnd,WM_CLOSE,0,0);
		//This delay is needed for PGP Dlls to unlock unfortunately
		Delay(4);
	endif;
	
	if (FindWindow ("", "PGPnet") != NULL) then
		if (SprintfBox (MB_RETRYCANCEL, "Application Running", "%s",
		"Please shut down PGPnet before continuing.") = IDCANCEL) then
			abort;
		else
			goto TestForRunningApps;
		endif;
	endif;

	//ENSURE NO PLUGINS\DLL's ARE IN USE
	hWnd2 = FindWindow("Microsoft Exchange 4.0 Viewer","");
	if (hWnd2 != NULL) then
		if (SprintfBox (MB_RETRYCANCEL, "Application Running", "%s","For install to continue Microsoft Exchange must not be" +
		" running.\nPlease shut down Microsoft Exchange.")= IDCANCEL) then
		abort;	
		else
			goto TestForRunningApps;
		endif;
	endif;
	
	hWnd3 = FindWindow("Microsoft Exchange 5.0 Viewer","");
	if (hWnd3 != NULL) then
		if (SprintfBox (MB_RETRYCANCEL, "Application Running", "%s","For install to continue Microsoft Exchange must not be" +
		" running.\nPlease shut down Microsoft Exchange.") = IDCANCEL) then
			abort;
		else
			goto TestForRunningApps;
		endif;
	endif;

	hWnd4 = FindWindow("rctrl_renwnd32","");
	if (hWnd4!= NULL) then
		if (SprintfBox (MB_RETRYCANCEL, "Application Running", "%s","For install to continue Microsoft Outlook must not be" +
		" running.\nPlease shut down Microsoft Outlook.") = IDCANCEL) then
			abort;
		else
			goto TestForRunningApps;
		endif;
	endif;

	hWnd5 = FindWindow("EudoraMainWindow","");
	if (hWnd5 != NULL) then
		if (SprintfBox (MB_RETRYCANCEL, "Application Running", "%s","For install to continue Eudora must not be running.\n"+
		"Please shut down Eudora.") = IDCANCEL) then
			abort;
		else
			goto TestForRunningApps;
		endif;
	endif;

	hWnd6 = FindWindow("PGPAdminWizardClass","");
	if (hWnd6 != NULL) then
		if (SprintfBox (MB_RETRYCANCEL, "Application Running", "%s","For install to continue the admin. wizard must not be" +
		" running.\nPlease shut down the admin. wizard.") = IDCANCEL) then
			abort;
		else
			goto TestForRunningApps;
		endif;
	endif;

	hWnd7 = FindWindow("PGPkeysMainWinClass","");
	if (hWnd7 != NULL) then
		if (SprintfBox (MB_RETRYCANCEL, "Application Running", "%s","For install to continue PGPkeys must not be running.\n"+
		"Please shut down PGPkeys.") = IDCANCEL) then
			abort;
		else
			goto TestForRunningApps;
		endif;
	endif;

	hWnd8 = FindWindow("PGPtools","");
	if (hWnd8 != NULL) then
		if (SprintfBox (MB_RETRYCANCEL, "Application Running", "%s","For install to continue PGPtools must not be running.\n"+
		"Please shut down PGPtools.") = IDCANCEL) then
			abort;
		else
			goto TestForRunningApps;
		endif;
	endif;

	hWnd9 = FindWindow("PGPlog","");
	if (hWnd9 != NULL) then
		if (SprintfBox (MB_RETRYCANCEL, "Application Running", "%s","For install to continue PGPLog must not be running.\n"+
		"Please shut down PGPLog.") = IDCANCEL) then
			abort;
		else
			goto TestForRunningApps;
		endif;
	endif;

	//Ensure that Outlook Express is not running
	if (FindWindow ("ThorBrowserWndClass", "") != NULL) then
		if (SprintfBox (MB_RETRYCANCEL, "Application Running", "%s","For install to continue Outlook Express must not be running.\n"+
		"Please shut down Outlook Express.") = IDCANCEL) then
			abort;
		else
			goto TestForRunningApps;
		endif;
	endif;

	if (FindWindow ("Ath_Note", "") != NULL) then
		if (SprintfBox (MB_RETRYCANCEL, "Application Running", "%s","For install to continue Outlook Express must not be running.\n"+
		"Please shut down Outlook Express.") = IDCANCEL) then
			abort;
		else
			goto TestForRunningApps;
		endif;
	endif;
	
	if(bIsWindowsNT4) then
		UseDLL (SUPPORTDIR ^ "install.dll");
		sztemp="PGPnetIke";
		itemp=StopService(sztemp);
		sztemp="PgpMacMP";
		itemp=StopService(sztemp);
		sztemp="PGPmemlock";
		itemp=StopService(sztemp);
		UnUseDLL (SUPPORTDIR ^ "install.dll");
	endif;
	if(bIsWindows2k) then
		UseDLL (SUPPORTDIR ^ "install.dll");
		sztemp="PGPmemlock";  
		itemp=StopService(sztemp);
		UnUseDLL (SUPPORTDIR ^ "install.dll");
	endif;
end;


///////////////////////////////////////////////////////////////////////////////
//
// Function:  CheckRequirements
//
//  Purpose:  This function checks all minimum requirements for the
//            application being installed.  If any fail, then the user
//            is informed and the setup is terminated.
//
///////////////////////////////////////////////////////////////////////////////
function CheckRequirements()
    NUMBER  nvDx, nvDy, nvResult, nvType, nvSize;
    STRING  svResult, szVersion, szKey, szName;

begin

	//check if user has admin privs.
	if !(Is (USER_ADMINISTRATOR, "")) then
		MessageBox("To run this uninstall you need to be logged in with\n" +
					"Administrator privileges. Setup will now exit.", SEVERE);
		abort;
	endif;
	
	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
    szKey = "SOFTWARE\\Network Associates\\PGP";
    szName = "Version";
    RegDBGetKeyValueEx (szKey, szName, nvType, szVersion, nvSize);
	
	//MAKE SURE THE USER REALLY WANTS TO UNINSTALL
	SetDialogTitle (DLG_ASK_YESNO,"Confirm uninstall");
	if (AskYesNo("Are you sure you want to Uninstall " + szVersion,NO) = NO) then
		exit;
	endif;
	
    bIsShellExplorer = FALSE;
    bIsWindowsNT4    = FALSE;
    bIsWindowsNT351  = FALSE;
    bIsWindows95     = FALSE;
    bIsWindows98     = FALSE;
	bIsWindows2k	 = FALSE;
	
    // Check screen resolution.
    GetExtents( nvDx, nvDy );

    if (nvDy < 480) then
        MessageBox( @ERROR_VGARESOLUTION, WARNING );
        abort;
    endif;

    // Set 'setup' operation mode
    bIs32BitSetup = TRUE;
    GetSystemInfo( ISTYPE, nvResult, svResult );
    if (nvResult = 16) then
        bIs32BitSetup = FALSE; // running 16-bit setup
        return 0; // no additional information required
    endif;

    // --- 32-bit testing after this point ---

    // Determine the target system's operating system.
    GetSystemInfo( OS, nvResult, svResult );

    if (nvResult = IS_WINDOWSNT) then
        // Check to see if OS is Windows NT 4.0 or Windows 2000,
        if (GetSystemInfo( WINMAJOR, nvResult, svResult ) = 0) then
            if (nvResult = 4) then
                bIsWindowsNT4 = TRUE;
            elseif (nvResult = 5) then
            	bIsWindows2k = TRUE;
            endif;
        endif;

    elseif (nvResult = IS_WINDOWS9X) then
        bIsShellExplorer = TRUE;
        // Check to see if OS is Windows 95 or Windows 98
        GetSystemInfo (WINMINOR, nvResult, svResult);
        if (nvResult < 10) then
           bIsWindows95 = TRUE;
        else
           bIsWindows98 = TRUE;
        endif;
    endif;

end;

///////////////////////////////////////////////////////////////////////////////
//
// Function:  Reboot
//
//  Purpose:  Informs the user that a reboot is needed
//
//
//
///////////////////////////////////////////////////////////////////////////////
function myReboot()
	STRING szMsg, szMsg2, szKey;
	NUMBER nReserved, nSize;
	BOOL bOpt1, bOpt2;
begin
	//end of uninstall, refresh the startmenu
	UseDLL (SUPPORTDIR ^ "install.dll");
	RefreshStartMenu();
	UnUseDLL (SUPPORTDIR ^ "install.dll");
	TARGETDIR = gInstallDir;
	DeleteFile (SUPPORTDIR ^ "install.dll");
	
szMsg  = "Your computer needs to be rebooted for the uninstall\n" +
		 "to complete. Some files may not have been deleted,\n" +
		 "these are safe to be manually deleted.";
	Start:
		bOpt1 = TRUE;
       	SetDialogTitle (DLG_ASK_OPTIONS, "Uninstall Complete.");
        SdFinish ("Setup Complete.", szMsg, "", "&Yes, I want to restart my computer now.",
        		"", bOpt1, bOpt2);
        Disable (DIALOGCACHE);
        szKey = "SOFTWARE\\Network Associates\\PGP" ;
        if (bOpt1) then
        	RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE);
        	RegDBSetKeyValueEx ( szKey, "Reboot" , REGDB_NUMBER , "3" , nSize );
        endif;
end;


///////////////////////////////////////////////////////////////////////////////
//
// Function: SetEnvVar
//
//  Purpose: This function adds or removes items from env. var.
//			
//
///////////////////////////////////////////////////////////////////////////////
function SetEnvVar(mode, szText)
    #define WM_SETTINGCHANGE	0x001A
    #define HWND_BROADCAST 		0xffff

    NUMBER	nType, nSize, nReturn, nResult;
    NUMBER	nvLineNumber;
    STRING	szKey, szEnv, szNewEnv, svString;
    STRING	svFileName, svReturnString;
    STRING	szBuffer, svReturnLine;
    POINTER pEnv;
    LIST	listID;
    BOOL	berr;

begin
	LongPathFromShortPath (szText);
	
	if ((bIsWindows98) || (bIsWindows95)) then
		if (mode = 1) then
			//SETTING
			LongPathToShortPath(szText);
			szBuffer = "%PATH%;" + szText;
			BatchFileLoad ("");
			BatchAdd ("PATH", szBuffer, "", AFTER);
			BatchFileSave ("");
		else
			//UNSETTING
			LongPathToShortPath(szText);
			szBuffer = "%PATH%;" + szText;
			BatchGetFileName (svFileName);
			ParsePath (svReturnString, svFileName, PATH);
			VarSave(SRCTARGETDIR);
			SRCDIR = svReturnString;
			if (FileGrep ("Autoexec.bat", szBuffer, svReturnLine, nvLineNumber, RESTART) = 0) then
				FileDeleteLine ("Autoexec.bat", nvLineNumber, nvLineNumber);
			endif;
			VarRestore(SRCTARGETDIR);
			return  TRUE;
		endif;
	else
		//this is Windows NT
		berr = FALSE;
		RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE);
    	szKey = "SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment";
    	nResult = RegDBGetKeyValueEx (szKey, "Path", nType, szEnv, nSize);

		if (mode = 1) then
    		//SETTING	
  			if ( szEnv % szText ) then
				//already in PATH
				berr = TRUE;
    		else
				szEnv = szEnv + ";" + szText;
				nResult = RegDBSetKeyValueEx (szKey, "Path", REGDB_STRING_EXPAND, szEnv, -1);
			endif;
			goto common;
		else
   			//UNSETTING
    		listID = ListCreate (STRINGLIST);
   			StrGetTokens (listID, szEnv, ";");	
   			szNewEnv = "";
   			if (ListGetFirstString (listID, svString) != END_OF_LIST) then
   				szNewEnv = svString;
   			endif;
	
GetNextString:

   			nReturn = ListGetNextString (listID, svString);
   		
   			if (nReturn = -1) then
				berr = TRUE;
				goto common;
   			elseif (nReturn = 0)then
   				//got string
   				if (svString != szText) then
   					szNewEnv = szNewEnv + ";" + svString;
   				endif;
   				goto GetNextString;
   			endif;
   			//Set new value
   			nResult = RegDBSetKeyValueEx (szKey, "Path", REGDB_STRING_EXPAND, szNewEnv, -1);
    		// Remove the list from memory.
   			ListDestroy (listID);
   		endif;
   	
common:
   		if !(berr) then
   	   		szEnv = "HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment";
   			pEnv = &szEnv;
   			SendMessage ( HWND_BROADCAST, WM_SETTINGCHANGE, 0, pEnv );
   			return TRUE;
   		else
	   		return FALSE;
   		endif;
   	endif;	
	end;
	
	
///////////////////////////////////////////////////////////////////////////////
//
// Function: UninstallGroupwise
//
//  Purpose: Uninstalls the Groupwise Plugin
//
//
///////////////////////////////////////////////////////////////////////////////
function UninstallGroupwise()	
	STRING szKey;
	STRING szValue;
	STRING szDll;
	STRING svValue;
	STRING szName;
	NUMBER nDll;
	NUMBER nSize;
	NUMBER nDlltmp;
	NUMBER nvSize;
	NUMBER nType;
	NUMBER nvType;
	BOOL bCONTINUE;
	
begin
VarSave (SRCTARGETDIR);
//DELETE FILES FROM THE GWPLUGIN INSTALL DIRECTORY
TARGETDIR = gInstallDir;
DeleteFile ("sendtph.dll");
DeleteFile ("pgpicons.dll");
DeleteFile ("readme.txt");
DeleteFile ("pgpgw32.exe");
DeleteFile ("license.txt");

//DELETE REGISTRY ENTRIES
//HKEY_CURRENT_USER
RegDBSetDefaultRoot (HKEY_CURRENT_USER);

szKey = "SOFTWARE\\Novell\\Groupwise\\Client\\Third Party";
nType = REGDB_STRING;
szValue = gInstallDir ^ "sendtph.dll";

nDll = 0;
bCONTINUE = TRUE;
while (bCONTINUE)
	nDll = nDll + 1;

	NumToStr (szDll, nDll);			
	szName = "Dll" + szDll;

	if (RegDBGetKeyValueEx (szKey, szName, nvType, svValue, nvSize) = 0) then
		if (svValue % "sendtph.dll") then
			bCONTINUE = FALSE;
		endif;
	else
		bCONTINUE = FALSE;
	endif;		
endwhile;

//nDll now contains the location of the entry
//Delete this key
RegDBDeleteValue (szKey, szName);

//Now we have to bump everything else up.
bCONTINUE = TRUE;
while (bCONTINUE)
	nDll = nDll + 1;

	NumToStr (szDll, nDll);			
	szName = "Dll" + szDll;

	if (RegDBGetKeyValueEx (szKey, szName, nvType, svValue, nvSize) = 0) then
		//we have its value so delete old copy
		RegDBDeleteValue (szKey, szName);
		//move it up
		nDlltmp = nDll - 1;
		NumToStr (szDll, nDlltmp);			
		szName = "Dll" + szDll;
		RegDBSetKeyValueEx (szKey, szName, nType, svValue, nSize);
	else
		bCONTINUE = FALSE;
	endif;
endwhile;

//HKEY_CLASSES_ROOT
RegDBSetDefaultRoot(HKEY_CLASSES_ROOT);
RegDBDeleteKey ("\\CLSID\\{BE2F27C1-53D3-11CF-AF6C-00A024AFE348}");

//HKEY_LOCAL_MACHINE
RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
RegDBDeleteKey ("SOFTWARE\\Novell\\Groupwise\\5.0\\C3PO\\DataTypes\\GW.CLIENT\\PGPGW.C3PO\\Events");
RegDBDeleteKey ("SOFTWARE\\Novell\\Groupwise\\5.0\\C3PO\\DataTypes\\GW.CLIENT\\PGPGW.C3PO\\Objects");
RegDBDeleteKey ("SOFTWARE\\Novell\\Groupwise\\5.0\\C3PO\\DataTypes\\GW.MESSAGE\\PGPGW.C3PO\\Objects");
RegDBDeleteKey ("SOFTWARE\\Novell\\Groupwise\\5.0\\C3PO\\DataTypes\\GW.MESSAGE\\PGPGW.C3PO\\Events");
RegDBDeleteKey ("SOFTWARE\\Classes\\CLSID\\{BE2F27C1-53D3-11CF-AF6C-00A024AFE348}");

VarRestore (SRCTARGETDIR);
end;


///////////////////////////////////////////////////////////////////////////////
//
// Function: UninstallLotusNotes
//
//  Purpose: Uninstalls the Lotus Notes Plugin
//
//
///////////////////////////////////////////////////////////////////////////////
function UninstallLotusNotes()
	STRING szKey;
	STRING svValue;
	STRING szSectionName;
	STRING svResult;
	STRING svNewString;
	STRING svListString;
	STRING szDelimiterSet;
	NUMBER nvType;
	NUMBER nvSize;
	NUMBER ListSize;
	LIST NSF_HOOKSlistID;
	LIST EXTMGR_ADDINSlistID;
	
	
begin
	VarSave (SRCTARGETDIR);
	
	szSectionName = "Notes";
	svNewString = "";
	
	RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE);
	szKey = "SOFTWARE\\Network Associates\\PGP";
	
	if (RegDBGetKeyValueEx(szKey,  "LotusPath", nvType,
						 svValue, nvSize) = 0 ) then
		TARGETDIR = svValue;
    	DeleteFile ("ndbPGP.dll");
    	DeleteFile ("nPGPext.dll");
    	DeleteFile ("nPGPNts.dll");
    	
    	RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE);
		szKey = "SOFTWARE\\Network Associates\\PGP";
		
		if (RegDBGetKeyValueEx(szKey,  "LotusIniFilePath", nvType,
						 	svValue, nvSize) = 0 ) then
						 	
			// Get rid of our entry from NSF_HOOKS key
			GetProfString (svValue, szSectionName, "", svResult);				 	
			szDelimiterSet = ",";
   			NSF_HOOKSlistID = ListCreate( STRINGLIST );
   			if(StrGetTokens( NSF_HOOKSlistID, svResult, szDelimiterSet ) = 0) then
				ListGetFirstString (NSF_HOOKSlistID, svListString);
				if (svListString != "nPGPNts.dll") then
					svNewString = svListString;
				endif;
				
				while (ListGetNextString (NSF_HOOKSlistID, svListString) = 0)
					if (svListString != "nPGPNts.dll") then
						if (svNewString = "") then
							svNewString = svListString;
						else
							svNewString = svNewString + "," + svListString;
						endif;
					endif;				
				endwhile;
				if (ReplaceProfString (svValue, szSectionName, "NSF_HOOKS",
									 svResult, svNewString) != 0) then
					MessageBox ("The value \"nPGPNts.dll\" could not be removed from\n" +
								"The key named \"NSF_HOOKS\" in the file :\n" +
								svValue + "\n" +
								"You can manually remove this entry.", WARNING);								
				endif;
   				endif;
   			
 			// Get rid of our entry from EXTMGR_ADDINS key
			GetProfString (svValue, szSectionName, "", svResult);				 	
			szDelimiterSet = ",";
   			EXTMGR_ADDINSlistID = ListCreate( STRINGLIST );
   			if(StrGetTokens( NSF_HOOKSlistID, svResult, szDelimiterSet ) = 0) then
				ListGetFirstString (EXTMGR_ADDINSlistID, svListString);
				if (svListString != "nPGPext.dll") then
					svNewString = svListString;
				endif;
				
				while (ListGetNextString (EXTMGR_ADDINSlistID, svListString) = 0)
					if (svListString != "nPGPext.dll") then
						if (svNewString = "") then
							svNewString = svListString;
						else
							svNewString = svNewString + "," + svListString;
						endif;
					endif;				
				endwhile;
				if (ReplaceProfString (svValue, szSectionName, "EXTMGR_ADDINS",
									 svResult, svNewString) != 0) then
					MessageBox ("The value \"nPGPext.dll\" could not be removed from\n" +
								"The key named \"EXTMGR_ADDINS\" in the file :\n" +
								svValue + "\n" +
								"You can manually remove this entry.", WARNING);								
				endif;
   			endif;  			
   		endif;							 	
	else
		goto cleanup;
	endif;
	
cleanup:
 	ListDestroy (NSF_HOOKSlistID);
	ListDestroy (EXTMGR_ADDINSlistID);
				
	VarRestore (SRCTARGETDIR);
	
	return  TRUE;
end;
// --- include script file section ---

//#include "sddialog.rul"

























































































